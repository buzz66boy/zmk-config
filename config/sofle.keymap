#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define WIN 0
#define LOWER 1
#define UPPER 2

/* Behavior Settings */
&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/ {
    
    ZMK_MACRO(undo,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings
        = <&macro_press &kp LCTRL>
        , <&macro_tap &kp Z>
        , <&macro_release &kp LCTRL>;) 

    ZMK_MACRO(cut,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings
        = <&macro_press &kp LCTRL>
        , <&macro_tap &kp X>
        , <&macro_release &kp LCTRL>;) 

    ZMK_MACRO(copy,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings
        = <&macro_press &kp LCTRL>
        , <&macro_tap &kp C>
        , <&macro_release &kp LCTRL>;)   
        
    ZMK_MACRO(paste,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings
        = <&macro_press &kp LCTRL>
        , <&macro_tap &kp V>
        , <&macro_release &kp LCTRL>;)    

    behaviors {
        // double tapping shift engages caps words
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  1    |  2  |  3  |  4   |  5   |  6   |                   |  7   |  8    |  9    |  0   |   =   |   -   |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  | Play  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               | GUI | ALT  | CTRL | LOWER|  SPACE |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp N1      &kp N2  &kp N3   &kp N4   &kp N5    &kp N6                                          &kp N7      &kp N8    &kp N9    &kp N0   &kp EQUAL &kp MINUS
&kp ESC     &kp Q   &kp W    &kp E    &kp R     &kp T                                           &kp Y       &kp U     &kp I     &kp O    &kp P     &kp BSPC
&kp TAB     &kp A   &kp S    &kp D    &kp F     &kp G                                           &kp H       &kp J     &kp K     &kp L    &kp SEMI  &kp SQT
&shift_caps &kp Z   &kp X    &kp C    &kp V     &kp B     &kp C_MUTE                  &kp C_PP  &kp N       &kp M     &kp COMMA &kp DOT  &kp FSLH  &kp RSHFT
                    &kp LWIN &kp LALT &kp LCTRL &mo LOWER &kp SPACE                   &kp SPACE &mo UPPER   &kp RCTRL &kp RALT  &kp RWIN
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |  F1   |  F2  |  F3  |   F4  |   F5  |  F6   |                   |  F7  |  F8   |  F9  |  F10  |  F11  |  F12  |
// |   `   |      |      |       |       |   6   |                   |      |  7    |  8   |  9    |       |       |
// |       |  !   |  @   |   #   |   $   |   %   |                   |      |  4    |  5   |  6    |       |       |
// |       | UNDO | CUT  | COPY  | PASTE |       |        |  |       |      |  1    |  2   |  3    |       |       |
//                |      |       |       |       |        |  |       |  0   |       |      |       |
            bindings = <
&kp F1    &kp F2    &kp F3    &kp F4      &kp F5      &kp F6                              &kp F7    &kp F8   &kp F9  &kp F10 &kp F11    &kp F12
&kp TILDE &kp LT    &kp GT    &kp LPAR    &kp RPAR    &kp GRAVE                           &trans    &kp N7   &kp N8  &kp N9  &trans     &kp DEL    
&bt BT_CLR &kp LBKT  &kp RBKT  &kp LBRC    &kp RBRC    &kp PIPE                            &trans    &kp N4   &kp N5  &kp N6  &trans     &trans
&trans    &undo     &cut      &copy       &paste      &kp BSLH  &trans            &trans  &trans    &kp N1   &kp N2  &kp N3  &trans     &trans
                    &trans    &trans      &trans      &trans    &kp ENTER         &trans  &kp N0    &trans   &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp K_NEXT K_PREV &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  | BT3   |  BLE  | USB  |                |      |      |       |      |       |       |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP | HOME |   ^   |  END |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |       |       |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &out OUT_BLE &out OUT_USB                   &kp F7    &kp F8    &kp F9   &kp F10   &kp F11    &kp F12
&trans     &trans       &trans       &trans       &trans       &trans                         &kp PG_UP &kp HOME  &kp UP   &kp END   &trans     &kp DEL
&trans     &trans       &trans       &trans       &trans       &trans                         &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp COLON  &kp DQT
&trans     &trans       &trans       &trans       &trans       &trans   &trans      &trans    &trans    &trans    &kp LT   &kp GT    &kp QMARK  &trans
                        &trans       &trans       &trans       &kp BSPC &trans      &kp ENTER &trans  &trans    &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp K_NEXT K_PREV &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
